--#############
--# GRUPO 04
--#############




--=============
-- Liga��o � BD
--=============
\set dataBase my_gis
;
\set userName postgres
;
\connect :dataBase :userName
;
--==========================
--==========================


-- mais informa��o sobre "client_encoding" em:
-- http://www.postgresql.org/docs/9.4/static/multibyte.html
\encoding WIN1250
--\encoding UTF8
;




--=========================================
-- Quais os infant�rios de cada freguesia ?
--=========================================
-- Atencao: a vista deve projectar o atributo "oid" ou uma chave prim�ria
--          do tipo "integer" de modo a ser apresentada no QGis
--
-- Os clientes com filhos em idade escolar que residem até 100m dos 
--          infantários da freguesia mais lucrativa
--=======================================================================

DROP VIEW IF EXISTS v_cli_frg;
DROP VIEW IF EXISTS v_inf_lucro;
DROP VIEW IF EXISTS v_inf_c_100;
DROP VIEW IF EXISTS v_inf_chi;


CREATE VIEW v_inf_chi 
AS
SELECT
    c.codigo AS codigo,
    c.bi AS bi_cliente,
    c.local AS local_cliente,
    TEXTCAT(TEXTCAT(c.nomeproprio, ' '), c.apelido) AS nome_cliente,
    f.nomeProprio AS nome_filho, 
    AGE(f.dataNascimento) AS idade_filho
FROM
    filho AS f
JOIN 
    cliente AS c
ON
    c.codigo = f.fk_cliente
WHERE
    AGE(f.dataNascimento) < INTERVAL '3 years'
;



CREATE VIEW v_inf_c_100
AS
SELECT
    c.*,
    i.nome AS nome_infantario,
    i.local AS local_infantario
FROM 
    infantario AS i
JOIN 
    v_inf_chi AS c
ON 
    ST_Distance(i.local, c.local_cliente) < 100
;


CREATE VIEW v_inf_lucro
AS
SELECT
    c.*,
    f.nome AS freguesia_nome,
    f.lucro AS lucro
FROM 
    v_inf_c_100 AS c
JOIN 
    freguesia AS f
ON 
    ST_Intersects(c.local_infantario, f.local)
;



CREATE VIEW v_cli_frg
AS
SELECT 
    ROW_NUMBER() OVER (ORDER BY c.nome_cliente) AS oid,
    c.nome_cliente AS nome,
    c.freguesia_nome AS freguesia,
    c.nome_infantario AS infantario,
    c.local_cliente AS local_cliente
FROM
   v_inf_lucro as c
WHERE c.lucro = (
    SELECT
        MAX(v_inf_lucro.lucro) AS max_lucro
    FROM
        v_inf_lucro
)
;

SELECT * FROM v_cli_frg;

--=========================================
-- os clientes que vivem numa freguesia mas estão
-- mais perto de algum infantário de outra freguesia (diferente daquela onde vivem).
--=========================================

DROP VIEW IF EXISTS v_inf_frg;
DROP VIEW IF EXISTS v_inf_prox;
DROP VIEW IF EXISTS v_inf_cli_frg;

-- freguesia do cliente
CREATE VIEW v_inf_cli_frg
AS
SELECT
    c.*,
    f.nome AS freguesia_nome,
    f.local AS freguesia_local
FROM 
    cliente AS c
JOIN 
    freguesia AS f
ON 
    ST_Intersects(c.local, f.local)
;

-- infantário mais proximo
CREATE VIEW v_inf_prox
AS
SELECT
    c.*,
    i.nome AS infantario_nome,
    i.local AS infantario_local
FROM 
    cliente AS c
JOIN 
    infantario AS i
ON 
    ST_Distance(c.local, i.local) = (
        SELECT MIN(ST_Distance(c.local, i2.local))
        FROM 
            infantario as i2
    )
;
-- que não pertence a freguesia do cliente 

CREATE VIEW v_inf_frg
AS
SELECT DISTINCT
    c.codigo AS oid,
    TEXTCAT(TEXTCAT(c.nomeproprio, ' '), c.apelido) AS nome_cliente,
    c.local as local_cliente,
    c.freguesia_nome,
    p.infantario_nome
FROM
    v_inf_cli_frg AS c
JOIN
    v_inf_prox AS p
ON 
    ST_Intersects(p.infantario_local, c.freguesia_local) = false
;

SELECT * FROM v_inf_frg;