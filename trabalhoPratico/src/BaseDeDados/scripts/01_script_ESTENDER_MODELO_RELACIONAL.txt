--#############
--# Grupo 04
--#############


--=============
-- Ligacao a BD
--=============
\set dataBase fuga_selvagem
;
\set userName postgres
;
\connect :dataBase :userName
;
--==========================
--==========================



----------------------------------------------------
----------------------------------------------------
-- Estender o Modelo Relacional com Novas Estruturas
----------------------------------------------------
----------------------------------------------------
drop function if exists novo_velocidade;
drop function if exists novo_orientacao;
drop function if exists novo_posicao;
drop function if exists novo_aceleracao_linear;
drop function if exists obter_aceleracao_predador;
drop function if exists obter_aceleracao_presa;

DROP OPERATOR IF EXISTS *( t_vector, real );
DROP OPERATOR IF EXISTS *( real, t_vector );
DROP OPERATOR IF EXISTS +( t_vector, t_vector );
DROP OPERATOR IF EXISTS -( t_vector, t_vector );
DROP OPERATOR IF EXISTS -( geometry, geometry );
DROP FUNCTION IF EXISTS produto_vector_por_escalar( t_vector, real );
DROP FUNCTION IF EXISTS soma_vector_vector( t_vector, t_vector );
DROP FUNCTION IF EXISTS subtrair_vector( t_vector, t_vector );
DROP FUNCTION IF EXISTS subtrair_geometry( geometry, geometry );
DROP FUNCTION IF EXISTS geometry_to_tvector( geometry );
DROP FUNCTION IF EXISTS normalizar( t_vector );

DROP TYPE IF EXISTS t_velocidade;
DROP TYPE IF EXISTS t_aceleracao;
DROP TYPE IF EXISTS t_vector;

----------------------------------------------------
----------------------------------------------------
-- Estender o Modelo Relacional com Novos Tipos
----------------------------------------------------
----------------------------------------------------

CREATE TYPE t_vector AS (
    x REAL, 
    y REAL
);

CREATE TYPE t_velocidade AS (
    linear t_vector, 
    angular REAL
);

CREATE TYPE t_aceleracao AS (
    linear t_vector, 
    angular REAL
);


----------------------------------------------------
----------------------------------------------------
-- Estender o Modelo Relacional com Novas Funcoes e Operadores
----------------------------------------------------
----------------------------------------------------

CREATE OR REPLACE FUNCTION produto_vector_por_escalar( vec t_vector, v real )
RETURNS t_vector
AS $$
DECLARE
    new_x real;
    new_y real;
BEGIN
    new_x := vec.x * v;
    new_y := vec.y * v;
    RETURN (new_x, new_y);
END;
$$ LANGUAGE plpgsql;

CREATE OPERATOR * (
    leftarg = t_vector,
    rightarg = real,
    procedure = produto_vector_por_escalar,
    commutator = *
);

----------------------------------------------------

CREATE OR REPLACE FUNCTION soma_vector_vector( vec_a t_vector, vec_b t_vector )
RETURNS t_vector
AS $$
DECLARE
    new_x real;
    new_y real;
BEGIN
    new_x := vec_a.x + vec_b.x;
    new_y := vec_a.y + vec_b.y;
    RETURN (new_x, new_y);
END;
$$ LANGUAGE plpgsql;

CREATE OPERATOR + (
    leftarg = t_vector,
    rightarg = t_vector,
    procedure = soma_vector_vector,
    commutator = +
);

----------------------------------------------------

CREATE OR REPLACE FUNCTION subtrair_vector( vec_a t_vector, vec_b t_vector )
RETURNS t_vector
AS $$
DECLARE
    new_x real;
    new_y real;
BEGIN
    new_x := vec_a.x - vec_b.x;
    new_y := vec_a.y - vec_b.y;
    RETURN (new_x, new_y);
END;
$$ LANGUAGE plpgsql;

CREATE OPERATOR - (
    leftarg = t_vector,
    rightarg = t_vector,
    procedure = subtrair_vector,
    commutator = -
);

----------------------------------------------------

CREATE OR REPLACE FUNCTION geometry_to_tvector(geom geometry)
RETURNS t_vector
AS $$
DECLARE
    x REAL;
    y REAL;
BEGIN
    x := ST_X(geom);
    y := ST_Y(geom);
    RETURN (x, y);
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION subtrair_geometry( geo_a geometry, geo_b geometry )
RETURNS t_vector
AS $$
SELECT
    geometry_to_tvector(geo_a) - geometry_to_tvector(geo_b) AS v
;
$$ LANGUAGE 'sql';


CREATE OPERATOR - (
    leftarg = geometry,
    rightarg = geometry,
    procedure = subtrair_geometry,
    commutator = -
);

----------------------------------------------------

CREATE OR REPLACE FUNCTION normalizar( vec t_vector )
RETURNS t_vector
AS $$
DECLARE
    norma real;
    new_x real;
    new_y real;
BEGIN
    norma := sqrt(power(vec.x, 2) + power(vec.y, 2));
	new_x := vec.x / norma;
	new_y := vec.y / norma;
    RETURN (new_x, new_y);
END;
$$ LANGUAGE plpgsql;



