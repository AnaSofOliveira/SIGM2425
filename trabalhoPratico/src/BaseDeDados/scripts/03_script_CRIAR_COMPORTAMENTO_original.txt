--#############
--# Grupo 04
--#############


--=============
-- Ligacao a BD
--=============
\set dataBase fuga_selvagem
;
\set userName postgres
;
\connect :dataBase :userName
;
--==========================
--==========================

----------------------------------------------------------
----------------------------------------------------------
-- Obter valores de 'cinematica' para um instante do tempo
----------------------------------------------------------
----------------------------------------------------------

drop function if exists obter_terreno( int, geometry );
DROP FUNCTION IF EXISTS novo_posicao( geometry, t_velocidade, real );
DROP FUNCTION IF EXISTS novo_orientacao( real, t_velocidade, real );
DROP FUNCTION IF EXISTS novo_velocidade( t_velocidade, t_aceleracao, real );

drop function if exists obter_aceleracao( int, int, real, int );
drop function if exists novo_aceleracao_linear;

DROP VIEW IF EXISTS v_novo_cinematica;
----------------------------------------------------------

\echo Create Function novo_velocidade
CREATE OR REPLACE FUNCTION novo_velocidade( velocidade t_velocidade, aceleracao t_aceleracao, tempo real )
RETURNS t_velocidade
AS $$
DECLARE
    velocidade_maxima t_velocidade;
    vel t_velocidade;
BEGIN
    RAISE NOTICE ' ';
    RAISE NOTICE ' ';
    RAISE NOTICE 'NOVO VELOCIDADE: ';
    RAISE NOTICE '* velocidade inicial: %', velocidade;

    vel.linear := velocidade.linear + aceleracao.linear * tempo;
    vel.angular := velocidade.angular + aceleracao.angular * tempo;

    RAISE NOTICE '* novo velocidade: %', vel;

    if vel.linear > velocidade_maxima.linear THEN
        RAISE NOTICE '* ajustado Ã  velocidade maxima: %', velocidade_maxima;
        return velocidade_maxima;
    else
        return vel;
    END IF;
END;
$$ LANGUAGE plpgsql;

----------------------------------------------------------

\echo Create Function novo_posicao
CREATE OR REPLACE FUNCTION novo_posicao( g_posicao geometry, velocidade t_velocidade, tempo real )
RETURNS geometry
AS $$
SELECT 
ST_Translate( $1,
              (($2).linear * $3 ).x,
              (($2).linear * $3 ).y )
$$ LANGUAGE 'sql';

----------------------------------------------------------

\echo Create Function novo_orientacao
CREATE OR REPLACE FUNCTION novo_orientacao( orientacao real, velocidade t_velocidade, tempo real )
RETURNS real
AS $$
BEGIN
    RETURN orientacao + velocidade.angular * tempo;
END;
$$ LANGUAGE plpgsql;

----------------------------------------------------------

\echo Create Function novo_aceleracao_linear
CREATE OR REPLACE FUNCTION novo_aceleracao_linear( predador objeto_movel, presa objeto_movel, velocidade_a_perseguir real)
RETURNS t_vector
AS $$
DECLARE
    a t_vector;
    f_atrito real;
    coef_atrito real;
    posicao_predador geometry;
    posicao_presa geometry;
    id_terr int;
BEGIN

    RAISE NOTICE ' ';
    RAISE NOTICE ' ';
    RAISE NOTICE 'NOVO ACELERACAO: ';
    posicao_predador := (SELECT cinematica.geo_ponto FROM cinematica WHERE cinematica.id_cinematica = predador.id_cinematica);
    posicao_presa := (SELECT cinematica.geo_ponto FROM cinematica WHERE cinematica.id_cinematica = presa.id_cinematica);

    RAISE NOTICE '* posicao do predador: %', ST_AsText(posicao_predador);
    RAISE NOTICE '* posicao da presa: %', ST_AsText(posicao_presa);

    id_terr := obter_terreno(posicao_predador);

    RAISE NOTICE '* id do terreno: %', id_terr;

    coef_atrito := (select afetacao.coef_atrito 
                    from afetacao_tipo_terreno_tipo_objeto_movel as afetacao
                    left join terreno on terreno.id_terreno = id_terr
                    where afetacao.id_tipo_objeto_movel = predador.id_tipo_objeto_movel and afetacao.id_tipo_terreno = terreno.id_tipo_terreno);

    if coef_atrito IS NULL THEN
        coef_atrito := 0;
    END IF;

    RAISE NOTICE '* coeficiente de atrito: %', coef_atrito;
    RAISE NOTICE ' ';
    
    a := normalizar(posicao_presa - posicao_predador) * velocidade_a_perseguir;

    RAISE NOTICE '* aceleracao sem atrito: %', a;
    
    a := a - ((1,1) * coef_atrito);

    RAISE NOTICE '* aceleracao com atrito: %', a;
    RAISE NOTICE '* aceleracao saida: %', a;
    RAISE NOTICE ' ';
    RAISE NOTICE ' ';

    RETURN a;
END;
$$ LANGUAGE plpgsql;

\echo -> Teste para novo_aceleracao_linear
select 
    predador.id_objeto_movel, 
    c_predador.aceleracao, 
    ST_AsText(c_predador.geo_ponto) as posicao_predador, 
    ST_AsText(c_presa.geo_ponto) as posicao_presa,
    c_predador.geo_ponto - c_presa.geo_ponto as distancia,
    normalizar(c_presa.geo_ponto - c_predador.geo_ponto) * 0.2 as normalizacao,
    novo_aceleracao_linear( predador, presa, 0.2 ) as nova_aceleracao
from objeto_movel as predador
left join objeto_movel as presa on presa.id_objeto_movel = predador.id_alvo
left join cinematica as c_predador on predador.id_cinematica = c_predador.id_cinematica
left join cinematica as c_presa on c_presa.id_cinematica = (select id_cinematica from objeto_movel where id_objeto_movel = predador.id_alvo)
where predador.id_objeto_movel = 1;

----------------------------------------------------------

CREATE OR REPLACE FUNCTION obter_terreno( nova_posicao geometry )
RETURNS int
AS $$
DECLARE
    id_terreno int;
BEGIN
    id_terreno := (SELECT terreno.id_terreno 
        FROM terreno 
        WHERE ST_Contains(terreno.geo_terreno, nova_posicao)
        ORDER BY terreno.z_index DESC
        LIMIT 1);
    RETURN id_terreno;
END;
$$ LANGUAGE plpgsql;

\echo Testes para obter_terreno
select 
    terreno.id_terreno,
    tipo_terreno.nome as tipo_terreno,
    terreno.z_index,
    obter_terreno( ST_GeomFromText('POINT(1000 1000)') ) as dentro, 
    ST_Contains(terreno.geo_terreno, ST_GeomFromText('POINT(1000 1000)'))
FROM terreno
left join tipo_terreno on terreno.id_tipo_terreno = tipo_terreno.id_tipo_terreno;

----------------------------------------------------------

\echo Create Function obter_aceleracao
CREATE OR REPLACE FUNCTION obter_aceleracao( id_perseguidor int, id_presa int, velocidade_a_perseguir real, id_tipo_terr int)
RETURNS t_aceleracao
AS $$
DECLARE
    aceleracao t_aceleracao;
    aceleracao_maxima t_aceleracao;
BEGIN

    RAISE NOTICE ' ';
    RAISE NOTICE ' ';
    RAISE NOTICE 'OBTER ACELERACAO:';
    aceleracao_maxima = (SELECT c_objeto_movel.aceleracao_maxima
                        FROM objeto_movel as objeto_movel
                            LEFT JOIN cinematica as c_objeto_movel ON objeto_movel.id_cinematica = c_objeto_movel.id_cinematica 
                        WHERE objeto_movel.id_objeto_movel = id_perseguidor);

    if id_presa IS NULL THEN
        aceleracao := (SELECT c_objeto_movel.aceleracao
                        FROM objeto_movel as objeto_movel
                            LEFT JOIN cinematica as c_objeto_movel ON objeto_movel.id_cinematica = c_objeto_movel.id_cinematica 
                        WHERE objeto_movel.id_objeto_movel = id_perseguidor);
        RAISE NOTICE '* Sem presa (aceleracao igual aceleracao do objeto): %', aceleracao;

    ELSE
        aceleracao := (SELECT (novo_aceleracao_linear(predador, presa, velocidade_a_perseguir), 
	                (c_predador.aceleracao).angular)::t_aceleracao as aceleracao
            FROM objeto_movel as predador
                left join objeto_movel as presa on presa.id_objeto_movel = id_presa
                left join cinematica as c_predador on predador.id_cinematica = c_predador.id_cinematica
                left join cinematica as c_presa on presa.id_cinematica = c_presa.id_cinematica
            WHERE predador.id_objeto_movel = id_perseguidor AND presa.id_objeto_movel = id_presa
            );
        RAISE NOTICE '* Com presa (aceleracao calculada): %', aceleracao;
        
    END IF;
    RAISE NOTICE ' ';
    RAISE NOTICE ' ';
    
    if aceleracao.linear > aceleracao_maxima.linear THEN
        RAISE NOTICE '* ACELERACAO MAXIMA ULTRAPASSADA: %, LIMITE: %', aceleracao, aceleracao_maxima;
        return aceleracao_maxima;
    ELSE
        return aceleracao;
    END IF;  
END;
$$ LANGUAGE plpgsql;

----------------------------------------------------------

-- CREATE VIEW v_novo_cinematica AS
SELECT cinematica.id_cinematica AS id_cinematica,
        objeto_movel.id_objeto_movel AS id_objeto_movel,
        ST_AsText(cinematica.geo_ponto) AS g_posicao,
        cinematica.orientacao AS orientacao,
        cinematica.velocidade AS velocidade,
        cinematica.aceleracao AS aceleracao,
        cinematica.boost AS boost,
        novo_orientacao( cinematica.orientacao, cinematica.velocidade, 2 ) AS nova_orientacao,
        novo_velocidade( cinematica.velocidade, cinematica.aceleracao, 2 ) AS nova_velocidade,
        ST_AsText( novo_posicao( cinematica.geo_ponto, cinematica.velocidade, 2 ) ) AS nova_posicao_texto
FROM objeto_movel
left join cinematica on objeto_movel.id_cinematica = cinematica.id_cinematica
-- where objeto_movel.id_objeto_movel = 1
;